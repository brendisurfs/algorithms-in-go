import List from "list"
import Option from "option"

record Node {
  name: String,
  mut children: Children,
},
type Children = Option<List<Node>>

let rec depthFirstSearch = (node: Node, inList: List<String>) => {

  let mut newList: List<String> = List.append(inList, [node.name])

  match (node.children) {
    Some(children) => List.map(c => depthFirstSearch(c, newList), children),
    None => [],
  }
  newList
}

let tree = {
  name: "A",
  children: Some(
    [
      {
        name: "B",
        children: Some(
          [{ name: "E", children: None }, { name: "F", children: None }]
        ),
      },
    ]
  ),
}

let mut store = []
let res = depthFirstSearch(tree, store)

print(res)
