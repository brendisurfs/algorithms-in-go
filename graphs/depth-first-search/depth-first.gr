import List from "list"
import Option from "option"

record Node {
  name: String,
  mut children: Children,
},
type Children = Option<List<Option<Node>>>

let successors = (node, edges) => {
  let mapped = List.map(x => x, edges)
  List.filter(n => n == node, mapped)
}

let dfs = (tree, start, fn) => {
  let rec internalDFS = (visited, node) => {
    if (!List.contains(node, visited)) {
      fn(node)
      let s = successors(node, tree)
      let red = List.reduce(internalDFS(visited, node), visited, s)
    }
  }
}

let tree = {
  name: "A",
  children: Some(
    [
      {
        name: "B",
        children: Some(
          [{ name: "E", children: None }, { name: "F", children: None }]
        ),
      },
    ]
  ),
}

let mut store = []
let res = dfs(tree)

print(res)
